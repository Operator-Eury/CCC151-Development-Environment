package customDialogs.invalidEmailDialog;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

//parent class GUI that can be used multiple times in popup dialogs

public class invalidEmailDialog extends JDialog {
    protected JPanel parentPanel;
    protected JButton confirmButton;
    protected JTextPane messageField;
    protected JTextArea messageArea;
    protected JPanel messageFieldPanel;
    protected JScrollPane messageAreaScrollPanel;

    public invalidEmailDialog(JDialog parent) {
        super(parent, "Please put an actual Email!", true);
        setResizable(false);
        setMinimumSize(new Dimension(350, 225));
        messageArea.setLineWrap(true);
        messageArea.setWrapStyleWord(true);
        setContentPane(parentPanel);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE); //clear from memory since sign in is one-time use only
        pack();
        setLocationRelativeTo(parent);

        confirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                // Ensure the scroll position is reset to the top
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        JScrollBar verticalScrollBar = messageAreaScrollPanel.getVerticalScrollBar();
                        verticalScrollBar.setValue(0); // Set to the top
                    }
                });
            }
        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        parentPanel = new JPanel();
        parentPanel.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        parentPanel.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        confirmButton = new JButton();
        confirmButton.setFocusPainted(false);
        confirmButton.setFocusable(false);
        confirmButton.setLabel("Got it Boss.");
        confirmButton.setRequestFocusEnabled(false);
        confirmButton.setRolloverEnabled(false);
        confirmButton.setText("Got it Boss.");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 5, 5);
        panel2.add(confirmButton, gbc);
        messageFieldPanel = new JPanel();
        messageFieldPanel.setLayout(new GridBagLayout());
        messageFieldPanel.setEnabled(false);
        messageFieldPanel.setFocusable(false);
        messageFieldPanel.setOpaque(false);
        messageFieldPanel.setRequestFocusEnabled(false);
        messageFieldPanel.setVerifyInputWhenFocusTarget(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        parentPanel.add(messageFieldPanel, gbc);
        messageField = new JTextPane();
        messageField.setEditable(false);
        messageField.setFocusCycleRoot(false);
        messageField.setFocusable(false);
        messageField.setOpaque(false);
        messageField.setText("I know an Email when I see one!");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        messageFieldPanel.add(messageField, gbc);
        messageAreaScrollPanel = new JScrollPane();
        messageAreaScrollPanel.setFocusable(false);
        messageAreaScrollPanel.setMinimumSize(new Dimension(14, 150));
        messageAreaScrollPanel.setOpaque(false);
        messageAreaScrollPanel.setRequestFocusEnabled(false);
        messageAreaScrollPanel.setVisible(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        parentPanel.add(messageAreaScrollPanel, gbc);
        messageArea = new JTextArea();
        messageArea.setEditable(false);
        messageArea.setEnabled(true);
        messageArea.setFocusable(false);
        messageArea.setLineWrap(false);
        messageArea.setOpaque(false);
        messageArea.setRequestFocusEnabled(false);
        messageArea.setText("");
        messageArea.setVerifyInputWhenFocusTarget(false);
        messageArea.setVisible(false);
        messageAreaScrollPanel.setViewportView(messageArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return parentPanel;
    }

}
